{
  "name": "IOU",
  "tagline": "Android application to help groups keep track of expenses.",
  "body": "# IOU\r\n\r\nIOU is an Android application that helps groups keep track of expenses. This project was developed as an individual project for Professor Gudrun Socherâ€™s CPE 305 at Cal Poly San Luis Obispo in Fall 2016.\r\n\r\n_Sarah Padlipsky_\r\n\r\n## Purpose\r\nToday's world moves at an unprecedented pace. People in all stages of life find themselves struggling to keep up with the amount of responsibilities they have. \r\n\r\nAn average mom has to plan their children's soccer team party, get a gift for her boss at work from the team, and plan Thanksgiving dinner for over 30 people. While exhausting, these three events are also costly if she does not make sure she gets paid back. That is where IOU comes in! \r\n\r\nA user of this application can:\r\n* Make groups for various events\r\n* Add necessary people to all of these groups \r\n* Keep track of what they've spent and what others have spent\r\n* Make sure they gets paid back for their efforts!\r\n\r\n## Walk-Through of the Application\r\n\r\n### Step 1: Logging in\r\n\r\n![Log-In Screenshot](https://github.com/cpe305/fall2016-project-sarahpadlipsky/blob/master/Documents/UI/Login.png?raw=true)\r\n\r\n#### Functionalities\r\n* Log-In using a Google username/password\r\n* Sign-out \r\n* Continue on to main application\r\n\r\n### Step 2: Adding Groups\r\n\r\n### Step 3: Viewing Groups\r\n\r\n### Step 4: Adding Bills\r\n\r\n### Step 5: Calculating IOU\r\n\r\n### Step 6: Making Note of Pay Back\r\n\r\n\r\n##Current View of Architecture##\r\nThe following class diagram shows the current architecture used in the IOU application. The architecture is a MVP pattern (Model-View-Presenter), which is a variation of the better known MVC architecture. \r\n\r\n![](https://github.com/cpe305/fall2016-project-sarahpadlipsky/blob/master/Documents/diagrams/MVPOverview.png?raw=true)\r\n### What is MVP?\r\n* View is a layer that displays data and reacts to user actions. \r\n * In this application, these are the XML files. \r\n* Model is a data access layer.\r\n * In this application, this is the java files; including logic and data containers. As well as the Realm Database. \r\n* Presenter is a layer that provides View with data from Model. \r\n * In this application, this is the Activity classes.\r\n\r\nAndroid uses the MVP pattern because the the view and the model classes do not interact. All changes must go through the activities to change the model/what the user sees.\r\n\r\n[MORE EXPLANATION]\r\n\r\n##Improved View of Architecture##\r\nDuring 305, new concepts were presented that would improve the current struct of the IOU application. For example, it was discussed earlier in the class that it is important to separate the logic from the view/controller. However, currently most of the logic resides in the controller. The new architecture below demonstrates this change. Design patterns were also the main focus of the class. The design patterns I would add are ___ and ___. \r\n\r\n### Design Pattern 1\r\n\r\n### Design Pattern 2 \r\n\r\n[ADD IMAGE]\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}