{
  "name": "IOU",
  "tagline": "Android application to help groups keep track of expenses.",
  "body": "# IOU\r\n\r\nIOU is an Android application that helps groups keep track of expenses. This project was developed as an individual project for Professor Gudrun Socherâ€™s CPE 305 at Cal Poly San Luis Obispo in Fall 2016.\r\n\r\n_Sarah Padlipsky_\r\n\r\n## Purpose\r\nToday's world moves at an unprecedented pace. People in all stages of life find themselves struggling to keep up with the amount of responsibilities they have. \r\n\r\nAn average mom has to plan their children's soccer team party, get a gift for her boss at work from the team, and plan Thanksgiving dinner for over 30 people. While exhausting, these three events are also costly if she does not make sure she gets paid back. That is where IOU comes in! \r\n\r\nA user of this application can:\r\n* Make groups for various events\r\n* Add necessary people to all of these groups \r\n* Keep track of what they've spent and what others have spent\r\n* View a list of all users and what they owe/are owed\r\n* Make sure they gets paid back for their efforts!\r\n\r\n## Walk-Through of the Application\r\n\r\n### Step 1: Logging in\r\n\r\n![Log-In Screenshot](https://github.com/cpe305/fall2016-project-sarahpadlipsky/blob/master/Documents/UI/Login.png?raw=true)\r\n\r\n#### Functionalities\r\n* Log-In using a Google username/password\r\n* Sign-out \r\n* Continue on to main application\r\n\r\n### Step 2: Adding Groups\r\n\r\n### Step 3: Viewing Groups\r\n\r\n### Step 4: Adding Bills\r\n\r\n### Step 5: Calculating IOU\r\n\r\n### Step 6: Making Note of Pay Back\r\n\r\n\r\n##Current View of Architecture##\r\nThe following class diagram shows the current architecture used in the IOU application. The architecture is a MVP pattern (Model-View-Presenter), which is a variation of the better known MVC architecture. \r\n\r\n![](https://github.com/cpe305/fall2016-project-sarahpadlipsky/blob/master/Documents/diagrams/MVPOverview.png?raw=true)\r\n### What is MVP?\r\n* View is a layer that displays data and reacts to user actions. \r\n * In this application, these are the XML files. \r\n* Model is a data access layer.\r\n * In this application, this is the java files; including logic and data containers. As well as the Realm Database. \r\n* Presenter is a layer that provides View with data from Model. \r\n * In this application, this is the Activity classes.\r\n\r\nAndroid uses the MVP pattern because the the view and the model classes do not interact. All changes must go through the activities to change the model/what the user sees.\r\n\r\n### Design Architecture\r\n\r\nHere you can see the design structure of the project that includes class diagrams, activities, and XML files. As shown below, a persistence layer was added to show that the database always exists and is not created during runtime.\r\n\r\nThe View layer lists the XML files used for visual representation of the various activities.\r\n\r\nThe Presenter layer outlines the different screens that the user will see, which are determined by activities. Though not described in the diagram below, Activities communicate through intents which creates date flow. This is a built in attribute of Android.\r\n\r\nThe Model layer describes the core data structures and log. A User represents someone who uses the application. A Bill represents money amounts being paid between users. A Group represents a collection of users and bills. The CurrentUser is a Singleton representation of the user that is signed in to the application. \r\n\r\n![Current IOU Class Diagram](https://github.com/cpe305/fall2016-project-sarahpadlipsky/blob/master/Documents/diagrams/IOUClassDiagram.png?raw=true)\r\n\r\n###Design Patterns###\r\n\r\nThe Singleton pattern was used in this project to control which user was logged into the application. Because only one instance of a user can be logged in on a single phone at a time, the Singleton Pattern worked so that different activities could access the current user's information. \r\n\r\n##Lesson's Learned for the Future##\r\n\r\n###Architecture###\r\nWhen the initial architecture was made, there was a lack of understanding of design patterns and modular code. In the current architecture, the model section does not contain the logic of the code. Instead, it contains data container classes that are later store in the database.However I quickly learned the importance of separating the logic from the view/controller. Because the model represents data container class, the controller holds most of the logic. \r\n\r\nIf I were to rewrite my application I would propose the following new architecture for the model classes:\r\n\r\n\r\n\r\n Design patterns were also the main focus of the class. The design patterns I would add are ___ and ___. \r\n\r\n### Design Pattern 1\r\n\r\n### Design Pattern 2 \r\n\r\n[ADD IMAGE]\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}